package com.example.mesh_chat

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothClass
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.mesh_chat.ui.theme.Mesh_ChatTheme
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private val bluetoothManager: BluetoothManager by lazy {
        getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
    }
    private val bluetoothAdapter: BluetoothAdapter? by lazy {
        bluetoothManager.adapter
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Mesh_ChatTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    FindDevicesScreen(bluetoothAdapter)
                }
            }
        }
    }
}

@SuppressLint("MissingPermission")
@Composable
fun FindDevicesScreen(bluetoothAdapter: BluetoothAdapter?) {
    val context = LocalContext.current
    var isScanning by remember { mutableStateOf(false) }
    var connectionStatus by remember { mutableStateOf<String?>(null) }
    val discoveredDevices = remember { mutableStateListOf<BluetoothDevice>() }
    var connectedDevice by remember { mutableStateOf<BluetoothDevice?>(null) } // ‚úÖ Nuevo
    var showAlreadyConnectedAlert by remember { mutableStateOf(false) } // ‚úÖ Para mostrar alerta
    val scope = rememberCoroutineScope()

    val requestBluetoothPermissions =
        rememberLauncherForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) {}

    val enableBluetoothLauncher =
        rememberLauncherForActivityResult(ActivityResultContracts.StartActivityForResult()) {}

    // Solicitar permisos al iniciar
    LaunchedEffect(Unit) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            requestBluetoothPermissions.launch(
                arrayOf(
                    Manifest.permission.BLUETOOTH_SCAN,
                    Manifest.permission.BLUETOOTH_CONNECT,
                    Manifest.permission.ACCESS_FINE_LOCATION
                )
            )
        } else {
            requestBluetoothPermissions.launch(
                arrayOf(
                    Manifest.permission.BLUETOOTH,
                    Manifest.permission.BLUETOOTH_ADMIN,
                    Manifest.permission.ACCESS_FINE_LOCATION
                )
            )
        }
    }

    // Escucha de dispositivos detectados
    DisposableEffect(key1 = bluetoothAdapter) {
        val receiver = object : BroadcastReceiver() {
            override fun onReceive(context: Context, intent: Intent) {
                val action = intent.action
                if (BluetoothDevice.ACTION_FOUND == action) {
                    val device: BluetoothDevice? = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                        intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE, BluetoothDevice::class.java)
                    } else {
                        @Suppress("DEPRECATION")
                        intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)
                    }

                    device?.let { foundDevice ->
                        // ‚úÖ Filtro: solo tel√©fonos
                        val deviceClass = foundDevice.bluetoothClass?.deviceClass
                        if (deviceClass == BluetoothClass.Device.PHONE_SMART ||
                            deviceClass == BluetoothClass.Device.PHONE_CELLULAR ||
                            deviceClass == BluetoothClass.Device.PHONE_MODEM_OR_GATEWAY ||
                            deviceClass == BluetoothClass.Device.PHONE_UNCATEGORIZED
                        ) {
                            if (foundDevice !in discoveredDevices) {
                                discoveredDevices.add(foundDevice)
                            }
                        }
                    }
                }
            }
        }
        val filter = IntentFilter(BluetoothDevice.ACTION_FOUND)
        context.registerReceiver(receiver, filter)

        onDispose {
            context.unregisterReceiver(receiver)
        }
    }

    // üß© Alerta si ya hay un dispositivo conectado
    if (showAlreadyConnectedAlert && connectedDevice != null) {
        AlertDialog(
            onDismissRequest = { showAlreadyConnectedAlert = false },
            title = { Text("Ya sincronizado") },
            text = {
                Text("Ya est√°s sincronizado con ${connectedDevice?.name ?: "otro dispositivo"}. " +
                        "Descon√©ctalo antes de sincronizar otro.")
            },
            confirmButton = {
                TextButton(onClick = { showAlreadyConnectedAlert = false }) {
                    Text("Aceptar")
                }
            }
        )
    }

    // üß± Interfaz
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(50.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text("üì± Buscar Tel√©fonos Bluetooth", style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(16.dp))

        if (isScanning) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                CircularProgressIndicator()
                Spacer(modifier = Modifier.width(8.dp))
                Text("Buscando tel√©fonos cercanos...")
            }
        }

        Spacer(modifier = Modifier.height(12.dp))

        Button(onClick = {
            if (bluetoothAdapter == null) {
                Toast.makeText(context, "Este dispositivo no soporta Bluetooth", Toast.LENGTH_LONG).show()
                return@Button
            }

            if (!bluetoothAdapter.isEnabled) {
                try {
                    val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
                    enableBluetoothLauncher.launch(enableBtIntent)
                } catch (e: Exception) {
                    val settingsIntent = Intent(Settings.ACTION_BLUETOOTH_SETTINGS)
                    context.startActivity(settingsIntent)
                }
            } else {
                isScanning = true
                discoveredDevices.clear()
                bluetoothAdapter.startDiscovery()
            }
        }) {
            Icon(Icons.Filled.Search, contentDescription = "Buscar")
            Spacer(modifier = Modifier.width(4.dp))
            Text("Buscar tel√©fonos")
        }

        Spacer(modifier = Modifier.height(16.dp))

        // üìã Lista de tel√©fonos encontrados
        LazyColumn(modifier = Modifier.weight(1f)) {
            items(discoveredDevices) { device ->
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp)
                        .clickable {
                            if (connectedDevice != null && connectedDevice != device) {
                                // ‚ö†Ô∏è Ya hay uno conectado ‚Üí mostrar alerta
                                showAlreadyConnectedAlert = true
                            } else {
                                // Intentar sincronizar
                                scope.launch {
                                    connectionStatus = "üîÑ Sincronizando con ${device.name ?: "Tel√©fono desconocido"}..."
                                    delay(2000)
                                    val success = bluetoothAdapter?.bondedDevices?.contains(device) == true || Math.random() > 0.5
                                    if (success) {
                                        connectedDevice = device
                                        connectionStatus = "‚úÖ Conectado correctamente a ${device.name ?: "Tel√©fono desconocido"}"
                                    } else {
                                        connectionStatus = "‚ùå Fall√≥ la sincronizaci√≥n con ${device.name ?: "Tel√©fono desconocido"}"
                                    }
                                }
                            }
                        }
                ) {
                    Text(
                        text = "${device.name ?: "Tel√©fono desconocido"} - ${device.address}",
                        modifier = Modifier.padding(16.dp)
                    )
                }
            }
        }

        connectionStatus?.let {
            Spacer(modifier = Modifier.height(8.dp))
            Text(it, style = MaterialTheme.typography.bodyLarge)
        }

        Spacer(modifier = Modifier.padding(50.dp))

        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Button(onClick = {
                isScanning = false
                bluetoothAdapter?.cancelDiscovery()
                connectionStatus = null
            }) {
                Text("DETENER ESCANEO")
            }

            // ‚úÖ Nuevo: bot√≥n para ‚Äúdesconectarse‚Äù
            if (connectedDevice != null) {
                Button(onClick = {
                    connectionStatus = "üîå Desconectado de ${connectedDevice?.name ?: "dispositivo"}"
                    connectedDevice = null
                }) {
                    Text("DESCONECTAR")
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun FindDevicesScreenPreview() {
    Mesh_ChatTheme {
        FindDevicesScreen(null)
    }
}
